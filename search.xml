<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>根据hexo+Github搭建自己博客</title>
      <link href="/2022/07/01/blog/da-jian-hexo/"/>
      <url>/2022/07/01/blog/da-jian-hexo/</url>
      
        <content type="html"><![CDATA[<h2 id="博客搭建步骤"><a href="#博客搭建步骤" class="headerlink" title="博客搭建步骤"></a>博客搭建步骤</h2><h3 id="绑定github-io域名到自己的域名"><a href="#绑定github-io域名到自己的域名" class="headerlink" title="绑定github.io域名到自己的域名"></a>绑定github.io域名到自己的域名</h3><ul><li>首先申请自己的域名(网上有很多教程)，我这里用的腾讯提供的域名提供商购买的域名</li><li>首先进入到域名解析界面，然后按照如下操作进行<ul><li><img src="https://mikevane.oss-cn-chengdu.aliyuncs.com/img/blog/page/202207021342883.png" alt="绑定域名"></li></ul></li><li>服务器ip地址可以通过ping获得<ul><li>进入cmd，输入ping 你自己的网站地址<ul><li><img src="https://mikevane.oss-cn-chengdu.aliyuncs.com/img/blog/page/202207021342647.png" alt="获取服务器地址"></li></ul></li></ul></li></ul><h3 id="设置域名后重新部署项目后出现404"><a href="#设置域名后重新部署项目后出现404" class="headerlink" title="设置域名后重新部署项目后出现404"></a>设置域名后重新部署项目后出现404</h3><ul><li><p>需要在博客的根目录下的source文件中加入CNAME文件</p></li><li><p>然后在CNAME里面写入自己的域名</p></li><li><blockquote><p><code>非常重要</code>：接着打开根目录的.config_yml文件，找到skip_render，在后面加上CNAME</p></blockquote></li></ul><hr><h3 id="通过阿里云OSS加速图片加载速度"><a href="#通过阿里云OSS加速图片加载速度" class="headerlink" title="通过阿里云OSS加速图片加载速度"></a>通过阿里云OSS加速图片加载速度</h3><ul><li><p>因为很多时候，网站无法显示是因为图片获取速度太慢的原因，所以既为了使用<strong>typora</strong>更方便的记笔记（利用<strong>阿里云OSS</strong>可以直接把图片托管到云端），也为了更快的访问，所以使用了付费的阿里云OSS</p></li><li><p><code>步骤</code>：</p><ol><li><p>首先下载typora与picgo（网上有教程，这里重点不在这）</p></li><li><p>阿里云官网购买OSS</p><ul><li><img src="https://mikevane.oss-cn-chengdu.aliyuncs.com/img/blog/page/202207021504614.png" alt="购买OSS"></li><li><img src="https://mikevane.oss-cn-chengdu.aliyuncs.com/img/blog/page/202207021505621.png" alt="购买OSS"></li></ul></li><li><p>设置OSS</p><ul><li><p>进入到控制台，点击对象存储OSS</p></li><li><p><img src="https://mikevane.oss-cn-chengdu.aliyuncs.com/img/blog/page/202207021506162.png" alt="设置OSS"></p></li><li><p><img src="https://mikevane.oss-cn-chengdu.aliyuncs.com/img/blog/page/202207021507881.png" alt="设置OSS"></p></li><li><p><img src="https://mikevane.oss-cn-chengdu.aliyuncs.com/img/blog/page/202207021507331.png" alt="设置OSS"></p><ul><li><img src="https://mikevane.oss-cn-chengdu.aliyuncs.com/img/blog/page/202207021510564.png" alt="设置Bucket"></li><li><img src="https://mikevane.oss-cn-chengdu.aliyuncs.com/img/blog/page/202207021511073.png" alt="设置Bucket"></li><li><img src="https://mikevane.oss-cn-chengdu.aliyuncs.com/img/blog/page/202207021512220.png" alt="设置Bucket"></li><li>点击你的Bucket名称，进入到下面这个页面</li><li><img src="https://mikevane.oss-cn-chengdu.aliyuncs.com/img/blog/page/202207021513798.png" alt="设置Bucket"></li></ul></li><li><p>进入到刚才新建的目录，点击 <strong>上传文件</strong> 选择你想上传的文件即可</p></li></ul></li><li><p>使用 <strong>picgo+typora</strong> 上传（不使用的可跳过）</p><ul><li><img src="https://mikevane.oss-cn-chengdu.aliyuncs.com/img/blog/page/202207021517785.png" alt="获取key"></li><li><img src="https://mikevane.oss-cn-chengdu.aliyuncs.com/img/blog/page/202207021517158.png" alt="获取key"></li><li>选择创建<strong>AccessKey</strong>，创建成功之后记住key</li><li>进入到 <strong>picgo</strong> 中</li><li><img src="https://mikevane.oss-cn-chengdu.aliyuncs.com/img/blog/page/202207021521728.png" alt="设置key"></li><li>进入到 <strong>typora</strong> 中，点击文件-&gt;偏好设置-&gt;图像</li><li><img src="https://mikevane.oss-cn-chengdu.aliyuncs.com/img/blog/page/202207021525688.png" alt="设置typora"></li><li>这样在把图片复制到typora后，typora会自动上传图片到你设置的目录中，并且picgo会自动将你图片对应的URL复制到你的粘贴板，你可以直接使用</li></ul></li><li><p>将博客的图片迁移到OSS中</p><ul><li>进入到本地博客根目录-&gt;themes-&gt;你的主题名-&gt;source</li><li>将里面的图片全部上传到OSS中</li><li>有些博客会使用yml文件进行配置图片地址，所以需要将里面配置的路径设置为你图片所对应的路径<ul><li><img src="https://mikevane.oss-cn-chengdu.aliyuncs.com/img/blog/page/202207021534893.png" alt="设置路径"></li></ul></li></ul></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【计算机网络】URL的基本格式以及常用URL</title>
      <link href="/2022/02/09/categories/wang-luo/ji-suan-ji-wang-luo-url-de-ji-ben-ge-shi-yi-ji-chang-yong-url/"/>
      <url>/2022/02/09/categories/wang-luo/ji-suan-ji-wang-luo-url-de-ji-ben-ge-shi-yi-ji-chang-yong-url/</url>
      
        <content type="html"><![CDATA[<ul><li>URL的基本格式：<strong>protocol:&#x2F;&#x2F;hostname&#x2F;path</strong></li></ul><table><thead><tr><th>协议</th><th>通用语法</th><th></th></tr></thead><tbody><tr><td>IP</td><td>&#x2F;&#x2F;<user>:<password>@<host>:<port>&#x2F;<url-path></td><td></td></tr><tr><td>FTP</td><td><cwd1>&#x2F;<cwd2>&#x2F;…&#x2F;<cwdN>&#x2F;<name>;type&#x3D;<typecode></td><td></td></tr><tr><td>HTTP</td><td>http:&#x2F;&#x2F;<host>:<port>&#x2F;<path>?<searchpart></td><td></td></tr><tr><td>Gopher</td><td>gopher:&#x2F;&#x2F;<host>:<port>&#x2F;<gopher-path></td><td></td></tr><tr><td>TELNET</td><td>telnet:&#x2F;&#x2F;<user>:<password>@<host>:<port>&#x2F;</td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【计算机网络】电路交换与分组交换的区别</title>
      <link href="/2022/01/17/categories/wang-luo/ji-suan-ji-wang-luo-dian-lu-jiao-huan-yu-fen-zu-jiao-huan-de-qu-bie/"/>
      <url>/2022/01/17/categories/wang-luo/ji-suan-ji-wang-luo-dian-lu-jiao-huan-yu-fen-zu-jiao-huan-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<ul><li><h3 id="电路交换与分组交换的区别"><a href="#电路交换与分组交换的区别" class="headerlink" title="电路交换与分组交换的区别"></a>电路交换与分组交换的区别</h3><table><thead><tr><th></th><th>电路交换</th><th>分组交换</th></tr></thead><tbody><tr><td>数据传输过程</td><td>i) 连接建立。 ii) 数据传输。 iii) 连接释放</td><td>直接发生数据传输</td></tr><tr><td>地址</td><td>在电路交换中，每个数据单元都知道由源提供的<strong>整个</strong>路径地址</td><td>每个数据单元只知道最终目的地址<strong>中间</strong>路径，并且这个路径是由路由器决定的</td></tr><tr><td>数据处理</td><td>数据仅在源系统处理</td><td>数据在包括源系统在内的所有中间节点上进行处理</td></tr><tr><td>延迟</td><td>数据单元之间的延迟一致</td><td>数据单元之间的延迟不均匀</td></tr><tr><td>资源预留</td><td>资源预留，因为数据传输的路径是固定的</td><td>没有资源预留，因为带宽在用户之间共享</td></tr><tr><td>可靠性</td><td>更可靠</td><td>不太可靠</td></tr><tr><td>浪费程度</td><td>资源浪费较多</td><td>资源浪费更少</td></tr><tr><td>存储转发</td><td>没有存储和转发技术</td><td>存在存储和转发技术</td></tr><tr><td>数据传输是否由单一对象传出</td><td>数据的传输由源完成</td><td>数据的传输不仅由源完成，还由中间路由器完成</td></tr><tr><td>拥塞对应的阶段</td><td>在连接建立阶段可能会发生拥塞，因为可能存在对通道发出请求但通道已被占用的情况</td><td>数据传输阶段可能会发生拥塞，大量数据包很快就会到来</td></tr><tr><td>双向性</td><td>不便于处理双边流量</td><td>适用于处理双边流量</td></tr><tr><td>成本计算</td><td>费用取决于时间和距离，而不取决于网络中的流量</td><td>费用基于字节数和连接时间</td></tr><tr><td>分组记录</td><td>永远不可能记录分组</td><td>可以记录分组</td></tr><tr><td>物理连接</td><td>源和目标之间有一条物理路径</td><td>源和目标之间没有物理路径</td></tr></tbody></table></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【计算机网络】HTTP的常用请求方法</title>
      <link href="/2022/01/17/categories/wang-luo/ji-suan-ji-wang-luo-http-de-chang-yong-qing-qiu-fang-fa/"/>
      <url>/2022/01/17/categories/wang-luo/ji-suan-ji-wang-luo-http-de-chang-yong-qing-qiu-fang-fa/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>请求</th><th>描述</th></tr></thead><tbody><tr><td>OPTIONS</td><td>The OPTIONS method represents a request for information about the communication options available on the request&#x2F;response chain identified by the Request-URI.</td></tr><tr><td><strong>GET</strong></td><td>The GET method means retrieve whatever information (in the form of an entity) is identified by the Request-URI.</td></tr><tr><td><strong>HEAD</strong></td><td>The HEAD method is identical to GET except that the server MUST NOT return a message-body in the response.</td></tr><tr><td><strong>POST</strong></td><td>The POST method is used to request that the origin server accept the entity enclosed in the request as a new subordinate of the resource identified by the Request-URI in the Request-Line.</td></tr><tr><td><strong>PUT</strong></td><td>The PUT method requests that the enclosed entity be stored under the supplied Request-URI.</td></tr><tr><td>DELETE</td><td>The DELETE method requests that the origin server delete the resource identified by the Request-URI.</td></tr><tr><td>TRACE</td><td>The TRACE method is used to invoke a remote, application-layer loopback of the request message.</td></tr><tr><td>CONNECT</td><td>This specification reserves the method name CONNECT for use with a proxy that can dynamically switch to being a tunnel (e.g. SSL tunneling [44]).</td></tr></tbody></table><ol><li>GET: Request data(including body)</li><li>HEAD: This method is often used for testing hypertext links for validity, accessibility,and recent modification.</li><li>POST: POST is designed to allow a unified method to overwrite specified items</li><li>PUT: If the Request-URI refers to an already existing resource, the enclosed entity SHOULD be considered as a modified version of the one residing on the origin server.</li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【计算机网络】FDMA TDMA CDMA</title>
      <link href="/2022/01/17/categories/wang-luo/ji-suan-ji-wang-luo-fdma-tdma-cdma/"/>
      <url>/2022/01/17/categories/wang-luo/ji-suan-ji-wang-luo-fdma-tdma-cdma/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>FDMA</th><th>TDMA</th><th>CDMA</th></tr></thead><tbody><tr><td>FDMA 代表频分多址。</td><td>TDMA 代表时分多址。</td><td>CDMA 代表码分多址。</td></tr><tr><td>不同站之间共享带宽</td><td>仅发生卫星转发器的时间共享</td><td>不同站之间发生共享，即带宽和时间</td></tr><tr><td>不需要任何码字</td><td>不需要任何码字(codewords)</td><td>码字是必须的</td></tr><tr><td>相邻信道之间的保护带（guard bands）是必要的</td><td>相邻时隙的保护时间是必要的</td><td>保护带和保护时间都是必要的</td></tr><tr><td>不需要同步</td><td>需要同步</td><td>不需要同步</td></tr><tr><td>数据率低</td><td>数据速率中等</td><td>数据率很高</td></tr><tr><td>数据传输方式为连续信号</td><td>数据传输方式是突发信号</td><td>数据传输方式为数字信号</td></tr><tr><td>灵活性低</td><td>灵活性适中</td><td>灵活性很高</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构】图的类型与实现</title>
      <link href="/2022/01/17/categories/shu-ju-jie-gou/shu-ju-jie-gou-tu-de-lei-xing-yu-shi-xian/"/>
      <url>/2022/01/17/categories/shu-ju-jie-gou/shu-ju-jie-gou-tu-de-lei-xing-yu-shi-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><h2 id="为什么要学习图"><a href="#为什么要学习图" class="headerlink" title="为什么要学习图"></a>为什么要学习图</h2><ul><li>之前的 <code>数据结构</code> 都不存在多对多的关系<ul><li><strong>线性表</strong>局限于<strong>一对一</strong></li><li><strong>树</strong>局限于<strong>一对多</strong></li></ul></li></ul><h2 id="图的类型"><a href="#图的类型" class="headerlink" title="图的类型"></a>图的类型</h2><h3 id="无向图"><a href="#无向图" class="headerlink" title="无向图"></a>无向图</h3><ul><li><strong>顶点</strong>（vertex），<strong>边</strong>（edge）</li><li>顶点之间的连接<strong>没有方向</strong></li><li>路径：从任一顶点开始，由边或弧的邻接至关系构成的有限长顶点序列</li></ul><p><img src="https://mikevane.oss-cn-chengdu.aliyuncs.com/img/blog/page/202207101256492.png" alt="无向图"></p><blockquote><p>比如：从D -&gt; C的路径有：</p><p> D -&gt; A -&gt; B -&gt; C</p><p> D -&gt; B-&gt; C</p></blockquote><h3 id="有向图"><a href="#有向图" class="headerlink" title="有向图"></a>有向图</h3><ul><li>顶点之间存在<strong>方向</strong></li><li>A只能通向B，而B不能通向A<br>  <img src="https://mikevane.oss-cn-chengdu.aliyuncs.com/img/blog/page/202207101256200.png" alt="有向图"></li></ul><h3 id="带权图"><a href="#带权图" class="headerlink" title="带权图"></a>带权图</h3><ul><li>边带权值的图（也称为<strong>网</strong>）</li></ul><p><img src="https://mikevane.oss-cn-chengdu.aliyuncs.com/img/blog/page/202207101256335.png" alt="带权图"></p><h2 id="图的表达方式"><a href="#图的表达方式" class="headerlink" title="图的表达方式"></a>图的表达方式</h2><h3 id="二维数组表示（邻接矩阵）"><a href="#二维数组表示（邻接矩阵）" class="headerlink" title="二维数组表示（邻接矩阵）"></a>二维数组表示（邻接矩阵）</h3><blockquote><p>邻接矩阵：表示图形中顶点之间<strong>相邻关系</strong>的矩阵</p><p>对于 n 个顶点的图而言，矩阵的 row 和 col 表示的是 1…n 个点</p></blockquote><p><img src="https://mikevane.oss-cn-chengdu.aliyuncs.com/img/blog/page/202207101256446.png" alt="邻接矩阵"></p><ul><li>0 表示不存在连接</li><li>1 表示存在连接</li></ul><h3 id="链表表示（邻接表）"><a href="#链表表示（邻接表）" class="headerlink" title="链表表示（邻接表）"></a>链表表示（邻接表）</h3><ul><li><strong>邻接矩阵</strong>需要给每个顶点都分配 n 个空间，但存在很多边其实没有被使用的情况，浪费空间，所以常常选择用<strong>邻接表</strong>来表示图</li><li><strong>邻接表</strong>的实现只存储<strong>存在的边</strong>，不会存储<strong>不存在的边</strong>，所以<strong>邻接表比邻接矩阵</strong>更加<strong>节约空间</strong></li></ul><h4 id="邻接表的组成"><a href="#邻接表的组成" class="headerlink" title="邻接表的组成"></a>邻接表的组成</h4><ul><li><p>数组 + 链表</p></li><li><p>每个顶点都对应一个链表，链表中存储的是相连的顶点</p><blockquote><p>比如在下图中</p><p> 以 0 为顶点作链表。由图可知，0与1 2 3 4 相连，所以将相连的几个顶点放置到链表中</p></blockquote></li></ul><p><img src="https://img-blog.csdnimg.cn/584e28d3a45b4112b45e383bed4fa644.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWlrZVZhbmUtYmI=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="图的实现"><a href="#图的实现" class="headerlink" title="图的实现"></a>图的实现</h2><h3 id="实现要求"><a href="#实现要求" class="headerlink" title="实现要求"></a>实现要求</h3><p><img src="https://mikevane.oss-cn-chengdu.aliyuncs.com/img/blog/page/202207101257186.png" alt="例子"></p><hr><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><ol><li>存储顶点 <code>String</code><ul><li>使用集合<code>ArrayList</code></li></ul></li><li>保存矩阵<ul><li>使用<strong>二维数组</strong></li></ul></li></ol><hr><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Graph</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> vertexList<span class="token punctuation">;</span><span class="token comment">//存储顶点集合</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> edges<span class="token punctuation">;</span><span class="token comment">//存储边的邻接矩阵</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> numOfEdges<span class="token punctuation">;</span><span class="token comment">//边的数目</span>    <span class="token comment">//构造器</span>    <span class="token keyword">public</span> <span class="token class-name">Graph</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//初始化</span>        vertexList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        edges <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        numOfEdges <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*    * 图的常用方法    *   返回节点的个数    *   得到边的数目    *   返回节点i对应的值    *   返回v1与v2的权值    *   显示图对应的矩阵     */</span>    <span class="token comment">//显示图对应的矩阵</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showGraph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> links <span class="token operator">:</span> edges<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>links<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//返回节点的个数</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNumOfVertex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> vertexList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//得到边的数目</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNumOfEdges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> numOfEdges<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//返回节点i对应的值</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> vertexList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//返回v1与v2的权值</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> edges<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">[</span>v2<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertVertex</span><span class="token punctuation">(</span><span class="token class-name">String</span> vertex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        vertexList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>vertex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     *     * @param v1 第一个顶点的下标（即第几个顶点）     * @param v2 第二个顶点的下标（即第几个顶点）     * @param weight 表示边     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">,</span> <span class="token keyword">int</span> weight<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        edges<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">[</span>v2<span class="token punctuation">]</span> <span class="token operator">=</span> weight<span class="token punctuation">;</span>        edges<span class="token punctuation">[</span>v2<span class="token punctuation">]</span><span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token operator">=</span> weight<span class="token punctuation">;</span>        numOfEdges<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//测试</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vertexs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"A"</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">,</span><span class="token string">"C"</span><span class="token punctuation">,</span><span class="token string">"D"</span><span class="token punctuation">,</span><span class="token string">"E"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">//初始化图</span>        <span class="token class-name">Graph</span> graph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graph</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//添加顶点</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> vertex <span class="token operator">:</span> vertexs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            graph<span class="token punctuation">.</span><span class="token function">insertVertex</span><span class="token punctuation">(</span>vertex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//添加边</span>        graph<span class="token punctuation">.</span><span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//显示邻接矩阵</span>        graph<span class="token punctuation">.</span><span class="token function">showGraph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h2><h3 id="深度优先搜索（Depth-First-Search）"><a href="#深度优先搜索（Depth-First-Search）" class="headerlink" title="深度优先搜索（Depth First Search）"></a>深度优先搜索（Depth First Search）</h3><ul><li>深度优先搜索：从<strong>顶点v</strong>出发，访问v的所有<strong>未被访问</strong>的<strong>邻接顶点</strong>，再对该顶点进行<strong>深度优先遍历</strong>，直至v的<strong>所有邻接顶点</strong>被访问。</li><li>如果这个<strong>邻接顶点</strong>被<strong>访问</strong>或者<strong>无邻接顶点</strong>，则返回<strong>上一节点</strong>。若此时图中尚有<strong>顶点未被访问</strong>，则从一个<strong>未被访问</strong>的顶点出发，重新进行<strong>深度优先遍历</strong>，直到<strong>所有顶点均被访问</strong>过为止。</li></ul><blockquote><p>DFS的典型例子：</p><p> 走迷宫。沿着一条路走，走不通则返回，然后再走其他路。</p></blockquote><ul><li>这样的访问策略是<strong>优先纵向访问</strong>，而不是对<strong>一个顶点</strong>的<strong>所有邻接顶点</strong>进行<strong>横向访问</strong></li><li>深度优先搜索是一个<strong>递归</strong>的过程</li></ul><hr><h4 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h4><ol><li>访问<strong>初始结点 v</strong>，并标记结点 v 为<code>已访问</code></li><li><strong>查找</strong>结点 v 的<strong>第一个邻接结点w</strong></li><li>如果 w <strong>存在</strong>，则执行<strong>步骤4</strong>。如果<strong>不存在</strong>，则回到步骤1，然后从v的<strong>下一个结点</strong>继续查找</li><li>如果 w <strong>未被访问</strong>，则继续对 w 进行<strong>深度优先遍历</strong></li><li>如果 w <strong>已被访问</strong>，则返回到 v ，继续进行步骤3</li></ol><hr><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p><img src="https://mikevane.oss-cn-chengdu.aliyuncs.com/img/blog/page/202207101257878.jpeg" alt="步骤"></p><hr><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Graph</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> vertexList<span class="token punctuation">;</span><span class="token comment">//存储顶点集合</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> edges<span class="token punctuation">;</span><span class="token comment">//存储边的邻接矩阵</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> numOfEdges<span class="token punctuation">;</span><span class="token comment">//边的数目</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> isVisit<span class="token punctuation">;</span><span class="token comment">//记录某个结点是否被访问过</span>    <span class="token comment">//构造器</span>    <span class="token keyword">public</span> <span class="token class-name">Graph</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//初始化</span>        vertexList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        edges <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        numOfEdges <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        isVisit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//得到第一个邻接结点的下标 w</span>    <span class="token comment">/**     *     * @param index     * @return 如果存在邻接结点，则返回对应的下标。如果不存在，则返回-1     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getFirstNeighbor</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vertexList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>edges<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//根据前一个邻接结点的下标获取下一个邻接结点</span>    <span class="token comment">/**     *     * @param v1 上一个结点     * @param v2 上一个结点的另外一个邻接结点     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNextNeighbor</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> v2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vertexList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>edges<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//深度优先遍历算法</span>    p <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> isVisit<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//访问当前结点</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">getValueByIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" -> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将当前结点设置为已访问</span>        isVisit<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment">//查找结点i的第一个邻接结点</span>        <span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token function">getFirstNeighbor</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>w <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isVisit<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>isVisit<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            w <span class="token operator">=</span> <span class="token function">getNextNeighbor</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//重载dfs，遍历所有结点并进行dfs</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">getNumOfVertex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isVisit<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>isVisit<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*    * 图的常用方法    *   返回节点的个数    *   得到边的数目    *   返回节点i对应的值    *   返回v1与v2的权值    *   显示图对应的矩阵     */</span>    <span class="token comment">//显示图对应的矩阵</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showGraph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> links <span class="token operator">:</span> edges<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>links<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//返回节点的个数</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNumOfVertex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> vertexList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//得到边的数目</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNumOfEdges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> numOfEdges<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//返回节点i对应的值</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getValueByIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> vertexList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//返回v1与v2的权值</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> edges<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">[</span>v2<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertVertex</span><span class="token punctuation">(</span><span class="token class-name">String</span> vertex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        vertexList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>vertex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     *     * @param v1 第一个顶点的下标（即第几个顶点）     * @param v2 第二个顶点的下标（即第几个顶点）     * @param weight 表示边     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">,</span> <span class="token keyword">int</span> weight<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        edges<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">[</span>v2<span class="token punctuation">]</span> <span class="token operator">=</span> weight<span class="token punctuation">;</span>        edges<span class="token punctuation">[</span>v2<span class="token punctuation">]</span><span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token operator">=</span> weight<span class="token punctuation">;</span>        numOfEdges<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//测试</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vertexs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"A"</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">,</span><span class="token string">"C"</span><span class="token punctuation">,</span><span class="token string">"D"</span><span class="token punctuation">,</span><span class="token string">"E"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">//初始化图</span>        <span class="token class-name">Graph</span> graph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graph</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//添加顶点</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> vertex <span class="token operator">:</span> vertexs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            graph<span class="token punctuation">.</span><span class="token function">insertVertex</span><span class="token punctuation">(</span>vertex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//添加边</span>        graph<span class="token punctuation">.</span><span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"深度优先遍历"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//显示邻接矩阵</span>        graph<span class="token punctuation">.</span><span class="token function">showGraph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h4><p><img src="https://mikevane.oss-cn-chengdu.aliyuncs.com/img/blog/page/202207101258388.png" alt="结果"></p><ul><li>与理论分析结果相同</li></ul><hr><h3 id="广度优先遍历（Broad-First-Search）"><a href="#广度优先遍历（Broad-First-Search）" class="headerlink" title="广度优先遍历（Broad First Search）"></a>广度优先遍历（Broad First Search）</h3><ul><li>类似于<code>分层搜索</code></li><li>需要用<strong>队列</strong>来保持访问过的结点的顺序，以便以按照顺序来访问结点的<strong>邻接结点</strong></li></ul><hr><h4 id="算法步骤-1"><a href="#算法步骤-1" class="headerlink" title="算法步骤"></a>算法步骤</h4><ol><li>访问初始结点 <strong>v</strong> 并标记结点 <strong>v</strong> 为已访问</li><li>结点 <strong>v</strong> 入队列</li><li>当<strong>队列非空</strong>时，继续执行，否则算法结束</li><li>出队列，取得队头结点 <strong>u</strong></li><li>查找结点 <strong>u</strong> 的第一个邻接结点 <strong>w</strong></li><li>若结点u的邻接结点w不存在，则回到步骤3，否则循环执行下面的步骤<ul><li>若结点 <strong>w</strong> 没有被访问，则访问结点 <strong>w</strong> 并标记为已访问</li><li>结点 <strong>w</strong> 入队列</li><li>查找结点 <strong>u</strong> 的继 w 邻接结点后的下一个邻接结点 <strong>w</strong></li></ul></li></ol><h4 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h4><p><img src="https://mikevane.oss-cn-chengdu.aliyuncs.com/img/blog/page/202207101258821.jpeg" alt="BFS步骤"></p><hr><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Graph</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> vertexList<span class="token punctuation">;</span><span class="token comment">//存储顶点集合</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> edges<span class="token punctuation">;</span><span class="token comment">//存储边的邻接矩阵</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> numOfEdges<span class="token punctuation">;</span><span class="token comment">//边的数目</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> isVisit<span class="token punctuation">;</span><span class="token comment">//记录某个结点是否被访问过</span>    <span class="token comment">//构造器</span>    <span class="token keyword">public</span> <span class="token class-name">Graph</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//初始化</span>        vertexList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        edges <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        numOfEdges <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        isVisit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//得到第一个邻接结点的下标 w</span>    <span class="token comment">/**     *     * @param index     * @return 如果存在邻接结点，则返回对应的下标。如果不存在，则返回-1     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getFirstNeighbor</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vertexList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>edges<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//根据前一个邻接结点的下标获取下一个邻接结点</span>    <span class="token comment">/**     *     * @param v1 上一个结点     * @param v2 上一个结点的另外一个邻接结点     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNextNeighbor</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> v2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vertexList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>edges<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">resetIsVisit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        isVisit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token function">getNumOfVertex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//广度优先遍历</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">resetIsVisit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> head<span class="token punctuation">;</span>        <span class="token keyword">int</span> neighbor<span class="token punctuation">;</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">getValueByIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        isVisit<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            head <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            neighbor <span class="token operator">=</span> <span class="token function">getFirstNeighbor</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>neighbor <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isVisit<span class="token punctuation">[</span>neighbor<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">getValueByIndex</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    isVisit<span class="token punctuation">[</span>neighbor<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                neighbor <span class="token operator">=</span> <span class="token function">getNextNeighbor</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span>neighbor<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*    * 图的常用方法    *   返回节点的个数    *   得到边的数目    *   返回节点i对应的值    *   返回v1与v2的权值    *   显示图对应的矩阵     */</span>    <span class="token comment">//显示图对应的矩阵</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showGraph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> links <span class="token operator">:</span> edges<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>links<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//返回节点的个数</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNumOfVertex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> vertexList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//得到边的数目</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNumOfEdges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> numOfEdges<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//返回节点i对应的值</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getValueByIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> vertexList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//返回v1与v2的权值</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> edges<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">[</span>v2<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertVertex</span><span class="token punctuation">(</span><span class="token class-name">String</span> vertex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        vertexList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>vertex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     *     * @param v1 第一个顶点的下标（即第几个顶点）     * @param v2 第二个顶点的下标（即第几个顶点）     * @param weight 表示边     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">,</span> <span class="token keyword">int</span> weight<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        edges<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">[</span>v2<span class="token punctuation">]</span> <span class="token operator">=</span> weight<span class="token punctuation">;</span>        edges<span class="token punctuation">[</span>v2<span class="token punctuation">]</span><span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token operator">=</span> weight<span class="token punctuation">;</span>        numOfEdges<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//测试</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vertexs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"A"</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">,</span><span class="token string">"C"</span><span class="token punctuation">,</span><span class="token string">"D"</span><span class="token punctuation">,</span><span class="token string">"E"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">//初始化图</span>        <span class="token class-name">Graph</span> graph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graph</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//添加顶点</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> vertex <span class="token operator">:</span> vertexs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            graph<span class="token punctuation">.</span><span class="token function">insertVertex</span><span class="token punctuation">(</span>vertex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//添加边</span>        graph<span class="token punctuation">.</span><span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"广度优先遍历"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">bfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//显示邻接矩阵</span>        graph<span class="token punctuation">.</span><span class="token function">showGraph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="证明-1"><a href="#证明-1" class="headerlink" title="证明"></a>证明</h4><p><img src="https://img-blog.csdnimg.cn/b680690f3bb84378a11bdd13447c4d66.png#pic_center" alt="结果"></p><ul><li>与理论分析结果相同</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>eNSP-构建静态路由实验</title>
      <link href="/2021/12/02/categories/ensp/ensp-gou-jian-jing-tai-lu-you-shi-yan/"/>
      <url>/2021/12/02/categories/ensp/ensp-gou-jian-jing-tai-lu-you-shi-yan/</url>
      
        <content type="html"><![CDATA[<h2 id="构建静态路由"><a href="#构建静态路由" class="headerlink" title="构建静态路由"></a>构建静态路由</h2><ul><li>网络拓扑图如下：</li></ul><p><img src="https://img-blog.csdnimg.cn/d34456807d824fd5b3e6fb4ef549a829.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWlrZXZhbmU=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="网络拓扑"></p><h3 id="设置AR-1"><a href="#设置AR-1" class="headerlink" title="设置AR-1"></a>设置AR-1</h3><pre class="line-numbers language-none"><code class="language-none">sysundo info-cen ensys AR-1int g0&#x2F;0&#x2F;0ip addr 1.1.1.254 24quitint g0&#x2F;0&#x2F;1ip addr 3.1.1.1 24quitdis ip rout12345678910<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查路由表可知设置成功<br>  <img src="https://img-blog.csdnimg.cn/4d5fdc5bcfe34f08b94c56cc69cf9ee0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWlrZXZhbmU=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="路由表"></li></ul><h3 id="设置AR-2"><a href="#设置AR-2" class="headerlink" title="设置AR-2"></a>设置AR-2</h3><pre class="line-numbers language-none"><code class="language-none">sysundo info-cen ensys AR-2int g0&#x2F;0&#x2F;0ip addr 3.1.1.2 24quitint g0&#x2F;0&#x2F;1ip addr 2.2.2.254 24quitdis ip rout12345678910<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查路由表可知设置成功</li></ul><p><img src="https://img-blog.csdnimg.cn/cf816ac905844434ad7451fdc4c50a18.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWlrZXZhbmU=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="路由表"></p><h3 id="设置AR-1与AR-2的静态路由"><a href="#设置AR-1与AR-2的静态路由" class="headerlink" title="设置AR-1与AR-2的静态路由"></a>设置AR-1与AR-2的静态路由</h3><ul><li>AR-1</li></ul><pre class="line-numbers language-none"><code class="language-none">ip route-sta 2.2.2.2 24 3.1.1.2dis ip rout12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>检查路由表的下一跳与静态路由是否配置成功</li></ul><p><img src="https://img-blog.csdnimg.cn/0b1e71b27fd04a82862d6d2223414bfb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWlrZXZhbmU=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="路由表"></p><ul><li><p>设置成功</p></li><li><p>AR-2</p></li></ul><pre class="line-numbers language-none"><code class="language-none">ip route-sta 1.1.1.1 24 3.1.1.1dis ip rout12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>检查路由表的下一跳与静态路由是否配置成功</li></ul><p><img src="https://img-blog.csdnimg.cn/ea4caf4099c04258bad8a351c80f7bd5.png#pic_center" alt="设置成功"></p><ul><li>设置成功</li></ul><h3 id="测试主机是否能ping通"><a href="#测试主机是否能ping通" class="headerlink" title="测试主机是否能ping通"></a>测试主机是否能ping通</h3><p><img src="https://img-blog.csdnimg.cn/6f1e8e9b7770481cb57016996f4a4ab4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWlrZXZhbmU=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="ping"></p><ul><li>测试能ping通，最开始的<strong>Request timeout</strong>是<strong>ARP</strong>导致的</li></ul><h4 id="测试ARP"><a href="#测试ARP" class="headerlink" title="测试ARP"></a>测试ARP</h4><ul><li>对AR-1的GE0&#x2F;0&#x2F;0进行抓包，清空主机的ARP缓存</li><li>重新测试通信</li></ul><img src="https://img-blog.csdnimg.cn/b045dfc24d6e445bbcc6bcdfb1f462e2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWlrZXZhbmU=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" style="zoom:150%;" /><ul><li>在存在ARP缓存的情况下继续通信，并继续抓包</li></ul><img src="https://img-blog.csdnimg.cn/331068b0981141929ad539dba8b9aa54.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWlrZXZhbmU=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" style="zoom:150%;" /><ul><li>在没有ARP请求的情况下，主机通信没有出现超时</li><li>所以证得，(在网络设置正确的情况下) 主机通信出现超时的原因是因为ARP协议</li></ul>]]></content>
      
      
      <categories>
          
          <category> ensp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> ensp </tag>
            
            <tag> 路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路由基础-直连路由、静态路由与动态路由</title>
      <link href="/2021/12/02/categories/ensp/lu-you-ji-chu-zhi-lian-lu-you-jing-tai-lu-you-yu-dong-tai-lu-you/"/>
      <url>/2021/12/02/categories/ensp/lu-you-ji-chu-zhi-lian-lu-you-jing-tai-lu-you-yu-dong-tai-lu-you/</url>
      
        <content type="html"><![CDATA[<h2 id="路由的来源"><a href="#路由的来源" class="headerlink" title="路由的来源"></a>路由的来源</h2><table><thead><tr><th>路由来源</th><th>备注</th></tr></thead><tbody><tr><td>直连路由</td><td>路由器接口上的网络（接口配置了IP地址并且开启）</td></tr><tr><td>静态路由</td><td>管理员手工添加的网络</td></tr><tr><td>动态路由</td><td>路由器之间动态学习形成的网络</td></tr></tbody></table><h3 id="直连路由"><a href="#直连路由" class="headerlink" title="直连路由"></a>直连路由</h3><p><img src="https://img-blog.csdnimg.cn/51663a2667db48218e2726957eaa3f9b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWlrZXZhbmU=,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><ul><li>上面这个路由的右边与下面的接口在<strong>配置IP地址</strong>后，并且在<strong>开启</strong>的状态下，形成了<strong>直连路由</strong></li></ul><p><img src="https://img-blog.csdnimg.cn/b379a782a1154415a7890251a9c03dea.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWlrZXZhbmU=,size_15,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="路由表"></p><h3 id="静态路由"><a href="#静态路由" class="headerlink" title="静态路由"></a><a href="https://so.csdn.net/so/search?q=%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1&spm=1001.2101.3001.7020">静态路由</a></h3><p><img src="https://img-blog.csdnimg.cn/b8aebdfce35f4199baba450981b8c854.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWlrZXZhbmU=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><ul><li>为了使目标地址为PC2的数据包转发到相应目的地，设置AR1的下一跳为10.1.1.2</li></ul><p><img src="https://img-blog.csdnimg.cn/bc8bd6efab9a4aec8c0a63179b1d6c3d.png#pic_center" alt="静态路由"></p><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><p><img src="https://img-blog.csdnimg.cn/1b85ca47f58a49e88319c532c7cc96d4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWlrZXZhbmU=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><ul><li>设置两路由器的动态路由OSPF</li></ul><p><img src="https://img-blog.csdnimg.cn/3c5c12723d3f41ad8ba39ce7b6db7a50.png#pic_center" alt="ospf"></p>]]></content>
      
      
      <categories>
          
          <category> ensp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> ensp </tag>
            
            <tag> 路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路由基础-分析路由表以及关于路由选路的问题</title>
      <link href="/2021/12/02/categories/ensp/lu-you-ji-chu-fen-xi-lu-you-biao-yi-ji-guan-yu-lu-you-xuan-lu-de-wen-ti/"/>
      <url>/2021/12/02/categories/ensp/lu-you-ji-chu-fen-xi-lu-you-biao-yi-ji-guan-yu-lu-you-xuan-lu-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="路由表解析"><a href="#路由表解析" class="headerlink" title="路由表解析"></a>路由表解析</h2><ul><li><blockquote><p>命令：display ip routing-table</p></blockquote></li></ul><p><img src="https://img-blog.csdnimg.cn/422fa1c843334c399a0c7b8551e606cf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWlrZXZhbmU=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="路由表"></p><table><thead><tr><th>路由表字段</th><th>含义</th></tr></thead><tbody><tr><td>Destination</td><td>目标地址，用来标识IP包的<strong>目标地址或者目标网络</strong></td></tr><tr><td>Mask</td><td>网络前缀（或掩码），选择<strong>最佳路由</strong>的重要评断依据（最长匹配原则）</td></tr><tr><td>NextHop</td><td>下一跳地址，指明IP包所经由的<strong>下一个路由器的接口地址</strong></td></tr><tr><td>Interface</td><td>出接口，指明IP包将从该路由器的哪个接口转发出去</td></tr><tr><td>Protocol</td><td>协议，路由的来源，学习方式</td></tr><tr><td>Preference</td><td>优先级，比较<strong>不同路由来源</strong>到达相同目标网络的优先级，越低越优先</td></tr><tr><td>Cost</td><td>度量值，比较<strong>相同路由来源</strong>到达相同目标网络的不同路径的优先级，越低越优先</td></tr></tbody></table><h3 id="常用路由类型的默认优先级"><a href="#常用路由类型的默认优先级" class="headerlink" title="常用路由类型的默认优先级"></a>常用路由类型的默认<a href="https://so.csdn.net/so/search?q=%E4%BC%98%E5%85%88%E7%BA%A7&spm=1001.2101.3001.7020">优先级</a></h3><table><thead><tr><th>路由类型</th><th>优先级</th></tr></thead><tbody><tr><td>Direct</td><td>0</td></tr><tr><td>OSPF</td><td>10</td></tr><tr><td>Static</td><td>60</td></tr><tr><td>RIP</td><td>100</td></tr></tbody></table><h2 id="路由选路"><a href="#路由选路" class="headerlink" title="路由选路"></a>路由选路</h2><p><img src="https://img-blog.csdnimg.cn/88f33d2ac599472fa4aca505f0dc00d2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWlrZXZhbmU=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="网络拓扑"></p><ul><li>如果AR4要给AR7转发数据包，它会怎么选路呢？</li><li>假设路由协议选择不同（OSPF，RIP…）<ul><li>上述问题属于<strong>不同路由来源到达相同目标网络</strong>，所以比较优先级</li><li>所以路由器选择优先级较低的那条路进行转发数据包</li></ul></li><li>假设所有路由协议选择相同<ul><li>上述问题属于<strong>相同路由来源到达相同目标网络</strong>，所以比较Cost</li><li>根据Cost越小，越优先</li><li>所以路由器选择Cost较低的那条路进行转发数据包</li></ul></li></ul><h3 id="路由表的工作内容"><a href="#路由表的工作内容" class="headerlink" title="路由表的工作内容"></a>路由表的工作内容</h3><ul><li>收到数据包查看<strong>目标IP地址</strong></li><li>在路由表中选择<strong>最佳路径</strong></li><li><strong>维护</strong>路由表</li><li>注意：路由表所显示的信息已经是<strong>比较优先级</strong>之后的结果</li></ul>]]></content>
      
      
      <categories>
          
          <category> ensp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> ensp </tag>
            
            <tag> 路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路由基础-等价路由负载分担</title>
      <link href="/2021/12/02/categories/ensp/lu-you-ji-chu-deng-jie-lu-you-fu-zai-fen-dan/"/>
      <url>/2021/12/02/categories/ensp/lu-you-ji-chu-deng-jie-lu-you-fu-zai-fen-dan/</url>
      
        <content type="html"><![CDATA[<ul><li><h2 id="等价路由（ECMP，Equal-Cost-Multi-Path）"><a href="#等价路由（ECMP，Equal-Cost-Multi-Path）" class="headerlink" title="等价路由（ECMP，Equal Cost Multi-Path）"></a>等价路由（ECMP，Equal Cost Multi-Path）</h2><ul><li>对于<strong>同一个路由来源</strong>，当达到同一个目标网络有<strong>几条相同度量值</strong>的路由时，<strong>这些路由都会被加入到路由表</strong>中，数据包会在这几个链路上进行<strong>负载分担</strong></li><li><strong>负载分担</strong>不是将<strong>数据包对半分</strong>，而是有一套算法机制控制</li></ul><p>  <img src="https://img-blog.csdnimg.cn/b4a6d2ed03af4f7e81b512a4f8e5b228.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWlrZXZhbmU=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="路由表"></p><h2 id="最长匹配原则"><a href="#最长匹配原则" class="headerlink" title="最长匹配原则"></a>最长匹配原则</h2><ul><li>最长前缀匹配原则：如果路由表查表转发分组时发现有多条路由可选择时，则选择网络前缀最长的那条进行转发</li></ul><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>  <img src="https://img-blog.csdnimg.cn/0da7608e0f4a4a188c9b4839a0b85f28.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWlrZXZhbmU=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="路由表"></p><h4 id="路由表的匹配过程"><a href="#路由表的匹配过程" class="headerlink" title="路由表的匹配过程"></a>路由表的匹配过程</h4>  <pre class="line-numbers language-none"><code class="language-none">当有数据报文传来时，路由表会将报文的目的地址前n位与表中的路由前n位相与（n为路由中的掩码长度）。如果不一致则排除对应路由。如果一致，则选择匹配长度最长的路由进行转发例如：当有目的地址为 9.1.2.1 的报文传来时路由器会将 8.0.0.0&#x2F;8 的路由与 9.1.2.1的前八位相与00001000 00000000 00000000 00000000(8.0.0.0)00001001 00000001 00000010 00000001(9.1.2.1)很明显能够得出，两地址前八位相与不能得到原八位路由器将不能匹配的路由剔除后，会选择子网掩码最长的路由进行数据转发,这也就是最长匹配原则比如，将9.1.0.0&#x2F;16 9.0.0.0&#x2F;8 9.1.2.1进行相与00001001 00000001 00000010 00000001(9.1.2.1)00001001 00000000 00000000 00000000(9.0.0.0&#x2F;8)00001001 00000001 00000000 00000000(9.1.0.0&#x2F;16)很明显看出，9.0.0.0这条路由能匹配15位，9.1.0.0&#x2F;16这条路由能匹配22位，所以选择9.1.0.0&#x2F;16这条路由进行转发数据。因为在前n位匹配的情况下，子网掩码越长的，越优先选择。123456789101112131415<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> ensp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> ensp </tag>
            
            <tag> 路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路由基础-相关概念及正常路由的条件.md</title>
      <link href="/2021/12/01/categories/ensp/lu-you-ji-chu-xiang-guan-gai-nian-ji-zheng-chang-lu-you-de-tiao-jian/"/>
      <url>/2021/12/01/categories/ensp/lu-you-ji-chu-xiang-guan-gai-nian-ji-zheng-chang-lu-you-de-tiao-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="路由基础"><a href="#路由基础" class="headerlink" title="路由基础"></a>路由基础</h1><ul><li>路由技术是Internet得以持续运转的关键所在</li><li>不同的网络之间需要通信，这时就需要路由器来连接不同的网络，实现网络之间的数据转发</li></ul><table><thead><tr><th>术语</th><th>备注</th><th>类比</th></tr></thead><tbody><tr><td>路由（Routing）</td><td>从源头到目标的路径 不同网络间的转发过程</td><td>火车</td></tr><tr><td>路由表（Routing Table）</td><td>路由信息的集合 路由的依据</td><td>时刻表</td></tr><tr><td>路由器（Router）</td><td>具有路由功能的设备</td><td>火车站</td></tr><tr><td>默认网关（Default Gateway）</td><td>通常是路由设备的接口Ip地址</td><td>火车站的地址</td></tr></tbody></table><h2 id="路由过程"><a href="#路由过程" class="headerlink" title="路由过程"></a>路由过程</h2><p><img src="https://mikevane.oss-cn-chengdu.aliyuncs.com/img/blog/page/202207101237509.png" alt="网络拓扑图"></p><ul><li>下一跳与出接口一一对应</li><li>下一跳：<strong>下一个路由的接口地址</strong>（可以理解为跳到下一个网关）</li></ul><table><thead><tr><th>路由器</th><th>目标网络</th><th>下一跳</th><th>出接口</th><th>路由器</th><th>目标网络</th><th>下一跳</th><th>出接口</th></tr></thead><tbody><tr><td>RA</td><td>10.1.2.0</td><td>10.1.2.1</td><td>E0</td><td>RB</td><td>10.1.2.0</td><td>10.1.2.2</td><td>E0</td></tr><tr><td></td><td>10.3.1.0</td><td>10.3.1.1</td><td>E1</td><td></td><td>10.3.1.0</td><td>10.1.2.1</td><td>E0</td></tr><tr><td></td><td>10.4.1.0</td><td>10.1.2.2</td><td>E0</td><td></td><td>10.4.1.0</td><td>10.4.1.1</td><td>E1</td></tr></tbody></table><blockquote><p>当<a href="https://so.csdn.net/so/search?q=%E8%B7%AF%E7%94%B1%E5%99%A8&spm=1001.2101.3001.7020">路由器</a>（或其他三层设备）收到一个IP数据包时，会查看数据包的IP头部中的<strong>目的IP地址</strong>，并在<a href="https://so.csdn.net/so/search?q=%E8%B7%AF%E7%94%B1%E8%A1%A8&spm=1001.2101.3001.7020">路由表</a>中进行查找，在匹配到<strong>最优的路由</strong>后，将数据包扔给该路由所指的<strong>出接口或下一跳</strong></p></blockquote><ul><li>特别：路由器必须要知道<strong>下一跳与出接口</strong>才会正常转发数据</li></ul><h3 id="求证路由器是否需要知道下一跳与出接口"><a href="#求证路由器是否需要知道下一跳与出接口" class="headerlink" title="求证路由器是否需要知道下一跳与出接口"></a>求证路由器是否需要知道下一跳与出接口</h3><p><img src="https://mikevane.oss-cn-chengdu.aliyuncs.com/img/blog/page/202207101237373.png" alt="网络拓扑图"></p><ul><li>如果在R1处设置静态路由（目的地址确定但是出接口不确定）</li></ul><p><img src="https://img-blog.csdnimg.cn/8405b12255cf455dac68a7979bb549d5.png#pic_center" alt="设置静态路由"></p><ul><li>查路由表无法找到对应表</li></ul><p><img src="https://img-blog.csdnimg.cn/5159886ab3304f07a5899d1235985b79.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWlrZXZhbmU=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="路由表"></p><ul><li>查静态路由配置能查到刚才设置的路由</li><li>并且通过配置中的<strong>Inactive</strong>可知，这条路由是处于未活跃状态</li><li>原因是下一跳的接口不确定</li></ul><p><img src="https://img-blog.csdnimg.cn/68dd59f8a6db4bf78f8b53d9c82122df.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWlrZXZhbmU=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="接口状态"></p><ul><li>重新设置对应的静态路由</li></ul><p><img src="https://img-blog.csdnimg.cn/6e95b83627cc46abb1aa0a77325617d2.png#pic_center" alt="设置静态路由"></p><ul><li>再次查表能查到相应的静态路由</li></ul><p><img src="https://img-blog.csdnimg.cn/66174e8f7de24ecd9688bb06da9a6cf9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWlrZXZhbmU=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="静态路由信息"></p><ul><li>测试主机之间是否能ping通</li></ul><p><img src="https://img-blog.csdnimg.cn/6123af6d743a4610b4b5e2e34427e63d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWlrZXZhbmU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="测试ping"></p><ul><li>所以路由器必须要知道<strong>下一跳与出接口</strong>才会正常转发数据</li></ul>]]></content>
      
      
      <categories>
          
          <category> ensp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> ensp </tag>
            
            <tag> 路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IP地址的组成</title>
      <link href="/2021/11/28/categories/wang-luo/ji-suan-ji-wang-luo-ip-di-zhi-de-zu-cheng/"/>
      <url>/2021/11/28/categories/wang-luo/ji-suan-ji-wang-luo-ip-di-zhi-de-zu-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h1><ul><li>在IP网络通信中，通信节点需要有<strong>IP地址</strong>才能相互通信</li></ul><h2 id="IP的组成"><a href="#IP的组成" class="headerlink" title="IP的组成"></a>IP的组成</h2><ul><li>以<strong>点分十进制</strong>表示，由<strong>32位二进制</strong>组成<br>  <img src="https://img-blog.csdnimg.cn/79126ffdb1994b42964f4b6e1d3b00b2.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWlrZXZhbmU=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="IP"></li><li>分为<strong>网络位</strong>和<strong>主机位</strong>两部分<ul><li>网络位，代表IP地址所属的网段</li><li>主机位，代表网段上的某个节点</li><li>由子网掩码决定分界点<br>  <img src="https://img-blog.csdnimg.cn/a85f2bcc46d84ec78f5f05a21235c47a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWlrZXZhbmU=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="IP header"></li></ul></li></ul><h2 id="熟记常用二进制与十进制的转化"><a href="#熟记常用二进制与十进制的转化" class="headerlink" title="熟记常用二进制与十进制的转化"></a>熟记常用<a href="https://so.csdn.net/so/search?q=%E4%BA%8C%E8%BF%9B%E5%88%B6&spm=1001.2101.3001.7020">二进制</a>与十进制的转化</h2><p><img src="https://img-blog.csdnimg.cn/4b75efa038d243678d91489e42edcc5a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWlrZXZhbmU=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="二进制与十进制"></p><p>资料参考：<a href="https://www.bilibili.com/video/BV1Dg4y187bZ">https://www.bilibili.com/video/BV1Dg4y187bZ</a></p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> IP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>子网掩码以及网络地址、主机地址、广播地址</title>
      <link href="/2021/11/28/categories/wang-luo/ji-suan-ji-wang-luo-fen-lei-bian-zhi-de-ipv4-di-zhi-yi-ji-hua-fen-zi-wang-de-li-ti/"/>
      <url>/2021/11/28/categories/wang-luo/ji-suan-ji-wang-luo-fen-lei-bian-zhi-de-ipv4-di-zhi-yi-ji-hua-fen-zi-wang-de-li-ti/</url>
      
        <content type="html"><![CDATA[<ul><li><h1 id="子网掩码-Subnet-Mask"><a href="#子网掩码-Subnet-Mask" class="headerlink" title="子网掩码(Subnet Mask)"></a>子网掩码(Subnet Mask)</h1><ul><li>用于区分网络位与主机位</li><li>1表示网络位，0表示主机位（连续的1和0）</li></ul><h2 id="默认子网掩码"><a href="#默认子网掩码" class="headerlink" title="默认子网掩码"></a>默认子网掩码</h2><p>  <img src="https://img-blog.csdnimg.cn/24e7efbaf68341b4bc44cc656a6b0766.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWlrZXZhbmU=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="默认子网掩码"></p><h1 id="网络地址、主机地址、广播地址"><a href="#网络地址、主机地址、广播地址" class="headerlink" title="网络地址、主机地址、广播地址"></a>网络地址、主机地址、<a href="https://so.csdn.net/so/search?q=%E5%B9%BF%E6%92%AD%E5%9C%B0%E5%9D%80&spm=1001.2101.3001.7020">广播地址</a></h1><table><thead><tr><th>名称</th><th>定义</th></tr></thead><tbody><tr><td>网络地址</td><td>主机位<strong>全为0</strong> 代表一个网段（头）</td></tr><tr><td>主机地址</td><td>主机位<strong>不全为0也不全为1</strong> 代表一个网段的一个节点（身体）</td></tr><tr><td>广播地址</td><td>主机位<strong>全为1</strong> 代表一个网段内的所有节点（尾）</td></tr></tbody></table><p>  <img src="https://img-blog.csdnimg.cn/0e3376889964410db16218ce59ee8bfd.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWlrZXZhbmU=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="各部分对应位置"></p><h2 id="各类IP地址可分配的网路地址与IP地址"><a href="#各类IP地址可分配的网路地址与IP地址" class="headerlink" title="各类IP地址可分配的网路地址与IP地址"></a>各类IP地址可分配的网路地址与IP地址</h2><table><thead><tr><th>类别</th><th>可分配网络数量</th><th>可分配IP地址数量</th></tr></thead><tbody><tr><td>A类</td><td>2^(8-1) - 2 &#x3D; 126 (减2的原因是除去最小网络号0 与最大网络号127)</td><td>2^24 - 2 （除去网络地址 与广播地址）</td></tr><tr><td>B类</td><td>2^(16-2) &#x3D; 16384</td><td>2^16 - 2 &#x3D; 65534</td></tr><tr><td>C类</td><td>2^(24-3) &#x3D; 2097152</td><td>2^8 - 2 &#x3D; 254</td></tr></tbody></table></li></ul><p>​<br>​    资料参考：<a href="https://www.bilibili.com/video/BV1Dg4y187bZ">https://www.bilibili.com/video/BV1Dg4y187bZ</a> <a href="https://www.bilibili.com/video/BV1c4411d7jb">https://www.bilibili.com/video/BV1c4411d7jb</a></p><ul><li><p>&#96;&#96;&#96;</p>  <pre class="line-numbers language-none"><code class="language-none">- &#96;&#96;&#96;    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> IP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【计算机网络】子网掩码以及各类地址</title>
      <link href="/2021/11/28/categories/wang-luo/ji-suan-ji-wang-luo-zi-wang-yan-ma-yi-ji-ge-lei-di-zhi/"/>
      <url>/2021/11/28/categories/wang-luo/ji-suan-ji-wang-luo-zi-wang-yan-ma-yi-ji-ge-lei-di-zhi/</url>
      
        <content type="html"><![CDATA[<ul><li><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="分类编址的IPv4地址"><a href="#分类编址的IPv4地址" class="headerlink" title="分类编址的IPv4地址"></a>分类编址的IPv4地址</h2><p>  <img src="https://img-blog.csdnimg.cn/de0ef8a32919414b8ef37168bfd13d07.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWlrZXZhbmU=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="分类ip"></p><h2 id="划分子网"><a href="#划分子网" class="headerlink" title="划分子网"></a>划分<a href="https://so.csdn.net/so/search?q=%E5%AD%90%E7%BD%91&spm=1001.2101.3001.7020">子网</a></h2><p>  <img src="https://img-blog.csdnimg.cn/22bab5a13a234b98a744ace4718a5920.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWlrZXZhbmU=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="划分子网"></p><p>  <img src="https://img-blog.csdnimg.cn/228b1a5431a145d19a02b559a9cc25b6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWlrZXZhbmU=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="划分子网"><br>  资料参考：<a href="https://www.bilibili.com/video/BV1Dg4y187bZ">https://www.bilibili.com/video/BV1Dg4y187bZ</a><br>  <a href="https://www.bilibili.com/video/BV1c4411d7jb">https://www.bilibili.com/video/BV1c4411d7jb</a></p>  <pre class="line-numbers language-none"><code class="language-none">    <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> IP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路由基础-路由聚合(汇总)以及最长匹配原则</title>
      <link href="/2021/11/28/categories/ensp/lu-you-ji-chu-lu-you-ju-he-hui-zong-yi-ji-zui-chang-pi-pei-yuan-ze/"/>
      <url>/2021/11/28/categories/ensp/lu-you-ji-chu-lu-you-ju-he-hui-zong-yi-ji-zui-chang-pi-pei-yuan-ze/</url>
      
        <content type="html"><![CDATA[<h1 id="路由聚合-构造超网"><a href="#路由聚合-构造超网" class="headerlink" title="路由聚合(构造超网)"></a>路由聚合(构造超网)</h1><ul><li>如果有多个网段连接在一个路由器上，可以通过路由聚合将五条路由信息聚合成一个路由信息</li><li>几个网段中<strong>共同的网络前缀</strong>组成<strong>聚合地址块</strong>，聚合地址块是路由聚合之后存储的路由信息</li></ul><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p><img src="https://img-blog.csdnimg.cn/46a3b4a0171343eaa740044b90ea5410.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWlrZXZhbmU=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="最长前缀匹配原则"><a href="#最长前缀匹配原则" class="headerlink" title="最长前缀匹配原则"></a>最长前缀匹配原则</h2><blockquote><p>最长前缀匹配原则：如果路由表查表转发分组时发现有多条路由可选择时，则选择网络前缀最长的那条进行转发</p><p>原因：这样的路由更加具体</p></blockquote><ul><li>相关证明见 <a href="https://blog.csdn.net/Mikevane/article/details/121668709">路由基础-等价路由负载分担以及最长匹配原则的解析</a>      资料参考：<a href="https://www.bilibili.com/video/BV1c4411d7jb">https://www.bilibili.com/video/BV1c4411d7jb</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> ensp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> ensp </tag>
            
            <tag> 路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【计算机网络】无分类编址的IPv4地址</title>
      <link href="/2021/11/28/categories/wang-luo/ji-suan-ji-wang-luo-wu-fen-lei-bian-zhi-de-ipv4-di-zhi/"/>
      <url>/2021/11/28/categories/wang-luo/ji-suan-ji-wang-luo-wu-fen-lei-bian-zhi-de-ipv4-di-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="无分类编址的IPv4地址"><a href="#无分类编址的IPv4地址" class="headerlink" title="无分类编址的IPv4地址"></a>无分类编址的IPv4地址</h2><blockquote><p>无分类域间路由选择（Classless Inter-Domain routing 可读作<strong>sider</strong>）</p></blockquote><ul><li>CIDR消除了传统的A类、B类和C类地址，以及划分子网的概念</li><li>CIDR可以更加有效地分配IPv4的地址空间</li></ul><h4 id="CIDR的作用"><a href="#CIDR的作用" class="headerlink" title="CIDR的作用"></a>CIDR的作用</h4><blockquote><p>CIDR使用“斜线记法”，或称CIDR记法。即在IPv4地址的后面加上<strong>斜线 “&#x2F;”</strong> ，在斜线后面写上<strong>网络前缀所占的比特数量</strong></p></blockquote><ul><li>CIDR实际上是将网络前缀都相同的连续的IP地址组成一个“CIDR地址块”</li><li>我们只需要知道CIDR地址块中的任何一个地址，就可以知道该地址块的全部细节：<ul><li>地址块的最小地址</li><li>地址块的最大地址</li><li>地址块的地址数量</li><li>地址块聚合某类网络（A，B，C类）的数量</li><li>地址掩码（也可继续称为子网掩码）</li></ul></li></ul><p><img src="https://mikevane.oss-cn-chengdu.aliyuncs.com/img/blog/page/202207101240832.png" alt="地址块细节"><br>资料参考：<a href="https://www.bilibili.com/video/BV1c4411d7jb">https://www.bilibili.com/video/BV1c4411d7jb</a></p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> IP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>eNSP-常用命令</title>
      <link href="/2021/11/16/categories/ensp/ensp-chang-yong-ming-ling/"/>
      <url>/2021/11/16/categories/ensp/ensp-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="各种视窗"><a href="#各种视窗" class="headerlink" title="各种视窗"></a>各种视窗</h2><h3 id="用户视窗"><a href="#用户视窗" class="headerlink" title="用户视窗"></a>用户视窗</h3><ul><li>刚进入交换机时的界面</li></ul><blockquote><p>交换机名字外面为“&lt; &gt;”</p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/e41ddc4ebd04925cd0488fbfe159db3e.png" alt="img"></p><h3 id="系统视窗"><a href="#系统视窗" class="headerlink" title="系统视窗"></a>系统视窗</h3><blockquote><p>交换机名字外面为“[ ]”<br>命令：system-view</p></blockquote><p><img src="https://img-blog.csdnimg.cn/5d972b045dee4e28bc2989e50ab087ed.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWlrZXZhbmU=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="接口视窗"><a href="#接口视窗" class="headerlink" title="接口视窗"></a>接口视窗</h3><blockquote><p>交换机+接口名称<br>命令：interface+接口</p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/97ef4ab921b2c6df895781c694660828.png" alt="img"></p><h3 id="Loopback-接口视图"><a href="#Loopback-接口视图" class="headerlink" title="Loopback 接口视图"></a>Loopback 接口视图</h3><blockquote><p>设备名-Loopback</p></blockquote><p><img src="https://img-blog.csdnimg.cn/f72a469c6cb1405fa2a85e942e0b7454.png#pic_center" alt="在这里插入图片描述"></p><h3 id="用户界面视图"><a href="#用户界面视图" class="headerlink" title="用户界面视图"></a>用户界面视图</h3><p><img src="https://img-blog.csdnimg.cn/22a2caebc1ec42f98b39407cb2d73b2e.png#pic_center" alt="在这里插入图片描述"></p><h3 id="RIP-协议视图"><a href="#RIP-协议视图" class="headerlink" title="RIP 协议视图"></a>RIP 协议视图</h3><p><img src="https://img-blog.csdnimg.cn/d5d8a7c1f116453a96e7755a477035e5.png#pic_center" alt="在这里插入图片描述"></p><h3 id="OSPF-协议视图"><a href="#OSPF-协议视图" class="headerlink" title="OSPF 协议视图"></a>OSPF 协议视图</h3><p><img src="https://img-blog.csdnimg.cn/3ddde2bd81bd475483871b99ae70a806.png#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> ensp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ensp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>eNSP-常见视窗</title>
      <link href="/2021/11/16/categories/ensp/ensp-chang-jian-shi-chuang/"/>
      <url>/2021/11/16/categories/ensp/ensp-chang-jian-shi-chuang/</url>
      
        <content type="html"><![CDATA[<h2 id="各种视窗"><a href="#各种视窗" class="headerlink" title="各种视窗"></a>各种视窗</h2><h3 id="用户视窗"><a href="#用户视窗" class="headerlink" title="用户视窗"></a>用户视窗</h3><ul><li>刚进入交换机时的界面</li></ul><blockquote><p>交换机名字外面为“&lt; &gt;”</p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/e41ddc4ebd04925cd0488fbfe159db3e.png" alt="用户视窗"></p><h3 id="系统视窗"><a href="#系统视窗" class="headerlink" title="系统视窗"></a>系统视窗</h3><blockquote><p>交换机名字外面为“[ ]”<br>命令：system-view</p></blockquote><p><img src="https://img-blog.csdnimg.cn/5d972b045dee4e28bc2989e50ab087ed.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWlrZXZhbmU=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="系统视窗"></p><h3 id="接口视窗"><a href="#接口视窗" class="headerlink" title="接口视窗"></a>接口视窗</h3><blockquote><p>交换机+接口名称<br>命令：interface+接口</p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/97ef4ab921b2c6df895781c694660828.png" alt="接口视窗"></p><h3 id="Loopback-接口视图"><a href="#Loopback-接口视图" class="headerlink" title="Loopback 接口视图"></a>Loopback 接口视图</h3><blockquote><p>设备名-Loopback</p></blockquote><p><img src="https://img-blog.csdnimg.cn/f72a469c6cb1405fa2a85e942e0b7454.png#pic_center" alt="接口视图"></p><h3 id="用户界面视图"><a href="#用户界面视图" class="headerlink" title="用户界面视图"></a>用户界面视图</h3><p><img src="https://img-blog.csdnimg.cn/22a2caebc1ec42f98b39407cb2d73b2e.png#pic_center" alt="用户界面视图"></p><h3 id="RIP-协议视图"><a href="#RIP-协议视图" class="headerlink" title="RIP 协议视图"></a>RIP 协议视图</h3><p><img src="https://img-blog.csdnimg.cn/d5d8a7c1f116453a96e7755a477035e5.png#pic_center" alt="RIP视图"></p><h3 id="OSPF-协议视图"><a href="#OSPF-协议视图" class="headerlink" title="OSPF 协议视图"></a>OSPF 协议视图</h3><p><img src="https://img-blog.csdnimg.cn/3ddde2bd81bd475483871b99ae70a806.png#pic_center" alt="OSPF视图"></p>]]></content>
      
      
      <categories>
          
          <category> ensp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ensp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>交换机三种端口模式的特点</title>
      <link href="/2021/11/16/categories/ensp/jiao-huan-ji-san-chong-duan-kou-mo-shi-de-te-dian/"/>
      <url>/2021/11/16/categories/ensp/jiao-huan-ji-san-chong-duan-kou-mo-shi-de-te-dian/</url>
      
        <content type="html"><![CDATA[<h2 id="交换机三种端口模式的特点"><a href="#交换机三种端口模式的特点" class="headerlink" title="交换机三种端口模式的特点"></a>交换机三种端口模式的特点</h2><table><thead><tr><th>接口</th><th>属于多端口</th><th>(通常)连接设备</th><th>PVID</th><th>接受</th><th>发送</th></tr></thead><tbody><tr><td>Access</td><td>❌</td><td>计算机</td><td>PVID &#x3D; VLAN ID</td><td>一般接受<strong>untagged</strong>数据帧，部分产品接受<strong>tagged</strong>数据帧 • 当接收<strong>untagged</strong>数据帧时，根据端口<strong>PVID</strong>值为数据帧加上tag和缺省优先级，再进 行交换转发； • 当收到<strong>tagged</strong>数据帧时，不同厂家设备可能处理不一样的！（忽略此特殊情况）</td><td><strong>去除标签并进行转发:</strong> • 对于数据帧中的<strong>VID</strong>与端口<strong>PVID</strong>一致的，去除标签并进行转发！ • 对于数据帧中的VID与端口PVID不一致的，不进行转发！</td></tr><tr><td>Trunk</td><td>✔</td><td>交换机之间或交换机与路由器</td><td>默认为1</td><td>• 能够接收<strong>VID&#x3D;PVID</strong>和<strong>VID≠PVID</strong>的<strong>tagged frame</strong>，不改变Tag； • 对于<strong>untagged frame</strong>则加上端口的<strong>PVID</strong>和<strong>default priority</strong>再进行交换转发；</td><td>• 对于VID&#x3D;PVID的<strong>Tag</strong>包则去掉<strong>VID Tag</strong>再进行转发。 • 对于<strong>VID ≠ PVID</strong>的<strong>Tag</strong>包则转发不修改<strong>Tag</strong>。 • 对于<strong>Untagged</strong>包则无此情况。</td></tr><tr><td>Hybrid</td><td>✔</td><td>Access + Trunk</td><td>默认为1</td><td>• 能够接收<strong>VID&#x3D;PVID</strong>和<strong>VID≠PVID</strong>的<strong>tagged frame</strong>，不改变TAG； • 对于<strong>untagged frame</strong>则加上端口的<strong>PVID</strong>和<strong>default priority</strong>再进行交换转发；</td><td>• 判断该VLAN在本端口的属性（即查看到该端口对哪些VLAN是<strong>untagged</strong>， 哪些 VLAN是 <strong>tag</strong>）。 • 如果要求输出为<strong>untagged</strong>包则在输出端口剥离VLAN信息，再发送；如果是要求输出 <strong>tag</strong>，则直接发送。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> ensp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> ensp </tag>
            
            <tag> 交换机 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
